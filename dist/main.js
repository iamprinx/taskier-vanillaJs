/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Task.js":
/*!*********************!*\
  !*** ./src/Task.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Task; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Task =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * create a new task object.\r\n   * @param {Array} tag \r\n   * \t\tAn array of strings \r\n   * @param {String} title \r\n   * \t\tA string which will be used as task title\r\n   * @param {String} priority \r\n   * \t\tstring which represents the priority of\r\n   * \t\ta task -- value can either be ( red, green, purple )\r\n   * @param {Boolean} reminder \r\n   * \t\twill trigger a 30 minutes alarm before specified due date\r\n   * @param {Date} dueDate \r\n   * \t\ta date for which task is met to be completed, cannot be a\r\n   * \t\tprevious date\r\n   * @param {Date} creationDate \r\n   * \t\tdate which task was created.\r\n   * @param {String} targeTime\r\n   * \t\ttime which task is meant to be completed\r\n   */\n  function Task(tag, title, priority, reminder, dueDate, creationDate, targetTime) {\n    _classCallCheck(this, Task);\n\n    this.tags = tag;\n    this.title = title;\n    this.priority = priority;\n    this.reminder = reminder;\n    this.targetDate = dueDate;\n    this.is_completed = false;\n    this.timeStamp = new Date();\n    this.targetTime = targetTime;\n    this.dateCreated = creationDate;\n    this.id = this.title.substring(0, 2) + Math.floor(Math.random() * 100000);\n    console.log(\"created successfully\");\n  }\n  /**\r\n   * changes title to a new title.\r\n   * @param {String} newTitle \r\n   * \t\twhen an empty value is passed as newTitle, an\r\n   * \t\texception will be raised as object's title cannot\r\n   * \t\tbe an empty string\r\n   */\n\n\n  _createClass(Task, [{\n    key: \"setTitle\",\n    value: function setTitle(newTitle) {\n      this.title = newTitle;\n    }\n    /**\r\n     * changes due date to a new date.\r\n     * @param {Date} newDueDate \r\n     * \t\tnewDueDate cannot be a previous date, an exception\r\n     * \t\twill be raised as dueDate cannot be a previous date.\r\n     */\n\n  }, {\n    key: \"setTargetDate\",\n    value: function setTargetDate(newDueDate) {\n      this.targetDate = newDueDate;\n    }\n    /**\r\n     * changes tags to a new tag.\r\n     * @param {Array} newTags\r\n     * \t\tAn array of strings, defaults to ['untagged'] if no\r\n     * \t\tvalue is passed\r\n     */\n\n  }, {\n    key: \"setTags\",\n    value: function setTags(newTags) {\n      this.tags = newTags;\n    }\n    /**\r\n     * changes the priority level of a task\r\n     * @param {String} newPriority \r\n     * \t\tAn exception is raised if an empty string is passed and\r\n     * \t\tif passed value is not either ( red, green, purple)\r\n     */\n\n  }, {\n    key: \"setPriorityLevel\",\n    value: function setPriorityLevel(newPriority) {\n      this.priority = newPriority;\n    }\n    /**\r\n     * changes reminder property of a task to a new value.\r\n     * @param {Boolean} reminder An exception is raised if value is not\r\n     * \t\ttrue or false.\r\n     */\n\n  }, {\n    key: \"setReminder\",\n    value: function setReminder(reminder) {\n      this.reminder = reminder;\n    }\n    /**\r\n     * set target time to a new target time\r\n     * @param {String} targetTime \r\n     */\n\n  }, {\n    key: \"setTargetTime\",\n    value: function setTargetTime(targetTime) {\n      this.targetTime = targetTime;\n    }\n    /**\r\n     * returns value of due date of a task in a friendly format.\r\n     */\n\n  }, {\n    key: \"getDueDate\",\n    value: function getDueDate() {\n      return this.targetDate.toDateString();\n    }\n    /**\r\n     * returns value of creation date of a task in a friendly format.\r\n     */\n\n  }, {\n    key: \"getCreationDate\",\n    value: function getCreationDate() {\n      return this.creationDate.toDateString();\n    }\n    /**\r\n     * sets task to completed.\r\n     */\n\n  }, {\n    key: \"completeTask\",\n    value: function completeTask() {\n      is_completed = true;\n    }\n  }]);\n\n  return Task;\n}();\n\n\n\n//# sourceURL=webpack:///./src/Task.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Task */ \"./src/Task.js\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n/**\r\n * this file helps to incorporate interaction to app. This file is\r\n * structured using sections and each section have a distinct responsibility\r\n * it handles. Sections are numbered\r\n * \r\n * Below is an index of all sections:\r\n * \r\n * SECTION 1        ------    CREATE UTILITY METHOD\r\n * SECTION 2        ------    APP STORAGE MANIPULATION TASK FORM UTILITY\r\n * SECTION 3        ------    USER EXPERIENCE\r\n*/\n// import { Calendar, preventDefault } from '@fullcalendar/core';\n// import dayGridPlugin from '@fullcalendar/daygrid';\n// import '@fullcalendar/core/main.css';\n// import '@fullcalendar/daygrid/main.css';\n // document.addEventListener('DOMContentLoaded', function() {\n//   var calendarEl = document.getElementById('calendar');\n//   var calendar = new Calendar(calendarEl, {\n//     plugins: [ dayGridPlugin ]\n//   });\n//   calendar.render();\n// });\n\n/**\r\n * \r\n *                          SECTION 1\r\n * ================================================================\r\n * ================================================================\r\n * \r\n *                    CREATE UTILITY METHODS\r\n * \r\n *  This section contains code to interact with local storage object and \r\n *  DOM manipulation\r\n *  \r\n *        TOPIC                                         FILE SEARCH KEY\r\n * \r\n *  -- retrieving data from local storage                data_retrieval\r\n *  -- checks if a data is present in database            data_presence\r\n *  -- persisting data to local storage                 data_persistence\r\n *  -- clearing data on local storage                     clear_table\r\n *  -- persisting data to local storage                 set_table_data\r\n *  -- delete an item from database                       delete_item\r\n *  -- dom element retrieval                         dom_element_retrieval\r\n *  -- dom element children removal              dom_element_children_removal\r\n *  -- dom element ( task container ) updater        task_container_updater\r\n *  -- dom priority check ( is radio button           dom_priority_check\r\n *     checked ?)  \r\n *  -- dom priority value ( does radio button         dom_priority_value\r\n *     value same ?)\r\n *  -- populater - task form field                populate_task_form_fields\r\n *  -- class list toggler                       dom_element_class_list_toggler\r\n * \r\n * ================================================================\r\n */\n// *****  data_retrieval\n\n/**\r\n  * retrieve all data from the specified storage\r\n  * @param {String} db_name \r\n  *     this is more like table name in RDBMS. it specify the table\r\n  *     whose data are to be removed\r\n  */\n\nvar retrieve_data = function retrieve_data(db_name) {\n  return JSON.parse(localStorage.getItem(db_name));\n}; // **** data_presence\n\n/**\r\n * checks if a data is present in the persisted table (not application storage).\r\n * returns every other data that are present excluding the passed data\r\n * whose presence is checked for\r\n * @param {Object} data \r\n *     the data whose presence is to be checked for\r\n * @param {String} db_name \r\n *     this is more like table name in RDBMS. it specify the table\r\n *     whose data are to be removed\r\n * \r\n * @returns {Array} \r\n * \r\n *     Boolean  ---> first item\r\n * \r\n *     Array of Data  Present in DB   --> second item\r\n */\n\n\nvar db_core = function db_core(data, db_name) {\n  var previous_data = retrieve_data(db_name);\n  var result;\n\n  if (previous_data) {\n    // if there are existing data in storage (localStorage)\n    // include those data to the new data which is to be \n    // persisted\n\n    /**\r\n      * Add it to application storage and persist in local storage\r\n      * \r\n      * To make sure a task is not duplicated in storage, we'll have\r\n      * to \r\n      * \r\n      *   -- filter existing storage and only return those task whose\r\n      *      id is not equal the id of the task to be added\r\n      *      if a task id equals the id of the task to be added, then\r\n      *      that task will not be in the result set returned after\r\n      *      filtering\r\n      */\n    result = previous_data.filter(function (item) {\n      return item.id !== data.id;\n    });\n    return [true, result];\n  }\n\n  return [false, data];\n}; // ***** clear_table\n\n/**\r\n * Clears all data in the specified storage name on local storage.\r\n * Use this with caution as it doesn't care about existing data.\r\n * \r\n * NOTE: \r\n *    if you want to use this function but still care  about existing data, \r\n *    check on retrieve_data function\r\n * @param {String} db_name \r\n *     this is more like table name in RDBMS. it specify the table\r\n *     whose data are to be removed\r\n */\n\n\nvar clear_storage = function clear_storage(db_name) {\n  localStorage.removeItem(db_name);\n}; // ***** set_table_data\n\n/**\r\n * This helps to set an application data on persisted database (local storage).\r\n * Use this with caution as it doesn't care about existing data. \r\n * \r\n * NOTE: \r\n *    if you want to use this function but still care  about existing data, \r\n *    check on retrieve_data function\r\n * @param {Object} data \r\n *     an application data to be persisted\r\n * @param {String} db_name\r\n *     this is more like table name in RDBMS. it specify the table\r\n *     whose data are to be removed \r\n */\n\n\nvar set_storage = function set_storage(data, db_name) {\n  localStorage.setItem(db_name, JSON.stringify(data));\n}; // ***** data_persistence\n\n/**\r\n  * Persist data to the specified storage name\r\n  * @param {Object} app_storage \r\n  *     stores data for usage\r\n  * @param {Object} data\r\n  *     the new  data to be add to storage\r\n  * @param {String} db_name \r\n  *     this is more like table name in RDBMS. it specify the table\r\n  *     whose data are to be removed\r\n  * \r\n  * @returns {Array} Updated application storage containing most updated data.\r\n  */\n\n\nvar persist_data = function persist_data(app_storage, data) {\n  var db_name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"tasks\";\n  var response = db_core(data, db_name);\n\n  if (response[0] === true) {\n    var result = response[1];\n    result.unshift(data);\n    app_storage = _toConsumableArray(result);\n    console.log(\"app-storage\\n\", app_storage);\n  } else {\n    app_storage.unshift(data);\n    console.log(\"app-storage\\n\", app_storage);\n  } // remove all existing data ( old data ) from database\n\n\n  clear_storage(db_name); // add new data to the specified storage name\n\n  set_storage(app_storage, db_name);\n  return app_storage;\n}; // ***** delete_item\n\n/**\r\n * \r\n * @param {Object} app_storage \r\n *    that stores data for application\r\n * @param {Object} data \r\n *     the new  data to be deleted from storage\r\n * @param {String} db_name \r\n *     this is more like table name in RDBMS. it specify the table\r\n *     whose data are to be removed\r\n * \r\n * @returns {Array} Updated application storage containing most updated data.\r\n */\n\n\nvar delete_task_item = function delete_task_item(app_storage, data, db_name) {\n  var response = db_core(data, db_name);\n\n  if (response[0] === true) {\n    app_storage = response[1];\n    clear_storage(\"tasks\");\n    set_storage(app_storage, db_name);\n  }\n\n  return app_storage;\n};\n/***\r\n*    DOM Manipulation\r\n*/\n// **** dom_element_retrieval\n\n/**\r\n * simplify the process of retrieving a DOM element\r\n *\r\n * @param element_identifier: an identifier represening the element\r\n * to be retrieved from DOM e.g\r\n *\r\n * for class referencing --->   .wrapper\r\n *\r\n * for id referencing    --->   #wrapper\r\n */\n\n\nvar get = function get(element_identifier) {\n  if (element_identifier.charAt(0) === \"#\") {\n    return document.getElementById(element_identifier.slice(1));\n  }\n\n  if (element_identifier.charAt(0) === \".\") {\n    return document.querySelectorAll(element_identifier);\n  }\n\n  throw new SyntaxError(\"no identifying symbol e.g (# --> id or . --> class)\");\n}; // ***** dom_element_children_removal\n\n/**\r\n * removes all child element from DOM\r\n * @param {String} element_key element's unique identifier ( class or id)\r\n */\n\n\nvar remove_all_child_element = function remove_all_child_element(element_key) {\n  var parent_list = get(element_key);\n  parent_list.forEach(function (parent) {\n    if (parent.childElementCount) {\n      for (var i = 0; i <= parent.childElementCount; i++) {\n        parent.removeChild(parent.children[i]);\n      }\n    }\n  });\n}; // *****   task_container_updater\n\n/**\r\n * utility method to add task to DOM\r\n * @param {Object} task an instance of Task class\r\n */\n\n\nvar update_task_dom = function update_task_dom(storage) {\n  var parent = document.querySelector('.task-container');\n  var task_obj;\n  remove_all_child_element('.task-container');\n  storage.forEach(function (task) {\n    var date = new Date(task.targetDate).toDateString();\n    var tag_txt = \"\";\n\n    if (task.tags) {\n      tag_txt += task.tags.map(function (tag) {\n        if (tag) {\n          return \"<a href=\\\"#\\\" class=\\\"card-tag\\\">#\".concat(tag.trim(), \"</a>\");\n        } else {\n          console.log(\"tag is undefined\");\n        }\n      });\n    }\n\n    task_obj = \"<div class=\\\"task-card bg-\".concat(task.priority, \"\\\">\\n     <div class=\\\"card-content\\\">\\n       <h3 class=\\\"card-title\\\">\").concat(task.title, \"</h3>\\n       <p class=\\\"card-time\\\">\\n         <i class=\\\"fas fa-clock\\\"></i>\\n         <span class=\\\"card-time__value\\\">\").concat(date, \" &nbsp; by &nbsp; \").concat(task.targetTime, \"</span>\\n       </p>\\n       <p class=\\\"card-time\\\">\\n         <i class=\\\"fas fa-bell\\\"></i>\\n         <span class=\\\"card-time__value\\\">\").concat(task.reminder ? \"yes\" : \"no\", \"</span>\\n       </p>\\n       <p class=\\\"card-tags\\\">\\n         \").concat(tag_txt, \"\\n       </p>\\n     </div>\\n\\n\\n     <span class=\\\"card-btns\\\">\\n         <button class=\\\"card-btn__edit edit-task-btn\\\" data-task=\\\"\").concat(task.id, \"\\\">\\n           <i class=\\\"fas fa-pen\\\"></i>\\n         </button>\\n\\n         <button class=\\\"card-btn__complete complete-task-btn\\\" data-task=\\\"\").concat(task.id, \"\\\">\\n           <i class=\\\"fas fa-check\\\"></i>\\n         </button>\\n\\n         <button class=\\\"card-btn__delete trash-task-btn\\\" data-task=\\\"\").concat(task.id, \"\\\">\\n           <i class=\\\"fas fa-trash\\\"></i>\\n         </button>\\n     </span>\\n   </div>\\n  \");\n  });\n  parent.innerHTML += task_obj;\n};\n/* PRIORITY */\n//*    with regards this application is used to \n//*    define the order of task in terms of importance\n//*    and relevance.\n// ***** dom_priority_check\n\n/**\r\n * Iterates through priority form fields (which are radio button) \r\n * and returns only the field (DOM element) that is checked.\r\n */\n\n\nvar dom_checked_priority_iterator = function dom_checked_priority_iterator() {\n  var all_priority = document.getElementsByName('priority');\n  var returning_element;\n  all_priority.forEach(function (ele) {\n    var element = get(\"#\".concat(ele.id));\n    element.checked === true ? returning_element = element : \"\";\n  });\n  return returning_element;\n}; // ***** dom_priority_value\n\n/**\r\n * Iterates trhough priority form fields (which are radio button)\r\n * and returns only the field (DOM element) whose value matches the passed value.\r\n * @param {String} value a string value can either be ('red', 'green', 'purple')\r\n */\n\n\nvar dom_priority_value_iterator = function dom_priority_value_iterator(value) {\n  var all_priority = document.getElementsByName('priority');\n  var returning_element;\n  all_priority.forEach(function (ele) {\n    var element = get(\"#\".concat(ele.id));\n    element.value.trim() === value.trim() ? returning_element = element : \"\";\n  });\n  return returning_element;\n}; // ***** populate_task_form_fields\n\n/**\r\n * inserts the values of an existing task into task form field\r\n * @param {Object} task an instance of a task\r\n */\n\n\nvar populate_task_form = function populate_task_form(task) {\n  /**\r\n   * retrieve all form fields and set values\r\n   */\n  if (task) {\n    // setting existing task title to form field\n    get(\"#id_task_title\").value = task.title;\n    /**\r\n     * setting existing task date to form field\r\n     * accepted format is `yyyy-MM-dd`\r\n     */\n\n    var date = new Date(task.targetDate).toISOString().substring(0, 10);\n    get(\"#id_task_date\").value = date; // setting existing task time to form field\n\n    get(\"#id_task_time\").value = task.targetTime; // setting existing task tags to form field\n\n    var tag_txt = \"\";\n    task.tags.forEach(function (tag, index) {\n      /**\r\n       * it is important that tags are separated with comma (,)\r\n       * when populating them.\r\n       */\n      if (index > 0) {\n        tag_txt += \",\".concat(tag);\n      } else {\n        tag_txt += tag;\n      }\n    });\n    get(\"#id_task_tags\").value = tag_txt; // setting existing task priority to form field\n\n    var priority_element = dom_priority_value_iterator(task.priority);\n    priority_element.checked = true; // setting existing task reminder to form field\n\n    get(\"#id_reminder\").checked = task.reminder; // setting task id to form field dataset\n\n    get(\"#id-task-creation-form\").dataset['task_id'] = task.id;\n  }\n}; // **** dom_element_class_list_toggler\n\n/**\r\n * Toggles class list value of a DOM element, a two way toggler.\r\n * \r\n * -- firstly\r\n *      It removes `rm_val` only if it is present in the class\r\n *      list of the DOM element and then adds `add_val`\r\n * \r\n * -- secondly\r\n *      It removes `add_val` only if it is present in the class\r\n *      list of the DOM element and then adds `rm_val`\r\n * \r\n * @param {String} element_id \r\n *     unique id representing the DOM element --- ** REQUIRED **\r\n * @param {String} rm_val \r\n *     the css class to be removed --- ** REQUIRED **\r\n * @param {String} add_val \r\n *     the css class to be added --- ** REQUIRED **\r\n */\n\n\nvar dom_classlist_toggler = function dom_classlist_toggler(element_id, rm_val, add_val) {\n  var element = get(\"#\".concat(element_id));\n\n  if (element) {\n    if (element.classList.contains(rm_val)) {\n      element.classList.remove(rm_val);\n      element.classList.add(add_val);\n    } else if (element.classList.contains(add_val)) {\n      element.classList.remove(add_val);\n      element.classList.add(rm_val);\n    }\n  }\n\n  return false;\n};\n/**\r\n * \r\n *                          SECTION 2\r\n * ================================================================\r\n * ================================================================\r\n *           APP STORAGE MANIPULATION TASK FORM UTILITY\r\n * \r\n * this section contains code that handles the app's core functionality  \r\n * e.g validation messages functionality, application storage \r\n * manipulation and application core processes.\r\n *        \r\n * \r\n *          TOPIC                                     FILE SEARCH KEY\r\n * \r\n *  -- unhide & hide form validation message            message_board\r\n *     board         \r\n *  -- display validation messages                       display_msg\r\n *  -- hide message board implement                      hide_board\r\n *  -- retrieving task from app storage                task_retrieval\r\n *  -- modal visibility toggler                        modal_visibilty\r\n *  -- delete operation triggered from PWO          task_delete_operation\r\n *  -- Proceed With Operation (PWO) handler              pwo_handler\r\n *  -- Proceed With Operation (PWO) event            pwo_event_listeners\r\n *     listener   \r\n *  -- handler to edit existing task                listener_4_task_edit\r\n *  -- handler to delete existing task             listener_4_task_delete\r\n *  -- cancel and create/update task form         task_form_button_listener\r\n *     button event handler\r\n *  -- reset task form fields                         task_form_reset\r\n *  -- task form field value validator                  form_validator\r\n *  -- create task from submitted form value             create_task\r\n *  -- update task from submitted form value             update_task\r\n *  -- process task form using form validator,        process_task_form\r\n *     message board and create or update handler\r\n *  -- create task button listener                   create_task_listener  \r\n * \r\n * ================================================================\r\n */\n\n\nvar STORAGE = [];\n/***\r\n* This section contains code to automatically populate \r\n* DOM list on application startup\r\n*/\n\n{\n  var data = retrieve_data('tasks');\n\n  if (data) {\n    STORAGE = _toConsumableArray(data);\n\n    if (data) {\n      data.map(function (task) {\n        update_task_dom(STORAGE);\n      });\n    }\n  }\n} // ***** message_board\n\n/**\r\n * Hides a validation message board, using the message_board_id \r\n * parameter to access the board to be hidden. \r\n * \r\n * @requirements {CSS property} hide\r\n *     This function requires a css class named `hide` to be \r\n *     present in the application css file. a simple example is\r\n *           \r\n *         .hide {\r\n *   \r\n *               display: none;\r\n *   \r\n *         }\r\n * \r\n * @param {String} message_board_id \r\n *     unique id representing the DOM element(board to be hidden)\r\n * \r\n * @useage\r\n *     unhide_message_board(\"board_id\");\r\n */\n\nvar unhide_message_board = function unhide_message_board(message_board_id) {\n  dom_classlist_toggler(message_board_id, 'hide', 'unhidden');\n};\n/**\r\n  * Unhides a validation message board, using the message_board_id \r\n  * parameter to access the board to be hidden. \r\n  * \r\n  * @requirements {CSS property} hide\r\n  *     This function requires a css class named `hide` to be \r\n  *     present in the application css file. a simple example is\r\n  *           \r\n  *         .hide {\r\n  *               \r\n  *             display: none;  \r\n  * \r\n  *          }\r\n  * \r\n  * @param {String} message_board_id \r\n  *     unique id representing the DOM element(board to be hidden)\r\n  * \r\n  * @useage\r\n  *     hide_message_board(\"board_id\");\r\n  */\n\n\nvar hide_message_board = function hide_message_board(message_board_id) {\n  dom_classlist_toggler(message_board_id, 'unhidden', 'hide');\n}; // ***** display_msg\n\n/**\r\n * Displays message to message board\r\n * @param {Array} msg_list \r\n *     a list of string representing messages to be displayed\r\n *    \r\n * @param {String} message_board_id \r\n *     unique id representing the DOM element(board to be hidden)\r\n */\n\n\nvar display_message = function display_message(msg_list, message_board_id) {\n  var message_board = get(\"#\".concat(message_board_id));\n  message_board.innerHTML = '';\n  msg_list.forEach(function (message) {\n    message_board.innerHTML += \"\".concat(message, \"<br/>\");\n  });\n}; // ****** hide_board\n\n/**\r\n * hides message board when message close button is clicked\r\n */\n\n\nvar message_close_btn = get('.close-msg-btn');\nmessage_close_btn.forEach(function (close_btn) {\n  close_btn.addEventListener('click', function () {\n    hide_message_board(close_btn.dataset.target);\n  });\n}); // ***** task_retrieval\n\n/**\r\n * Query storage and return task whose id is \r\n * supplied only when it is found.\r\n * \r\n * @param {String} task_id unique id for a task\r\n * \r\n * @returns {Array}  Boolean and Task or String\r\n * \r\n * if task is found in storage using the given id\r\n * an array of True and the found Task is returned else\r\n * False and a String message is returned.\r\n */\n\nvar retrieve_task = function retrieve_task(task_id) {\n  var result;\n  STORAGE.forEach(function (task) {\n    if (task.id === task_id) {\n      result = [true, task];\n    }\n  });\n\n  if (result) {\n    return result;\n  }\n\n  return [false, 'no task with id found'];\n}; // ***** modal_visibilty\n\n/**\r\n * toggles the visibility of a modal\r\n * @param {String} element \r\n *    DOM element modal id. This defaults to  `new-task-modal`\r\n */\n\n\nvar toggle_modal_visibility = function toggle_modal_visibility() {\n  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#new-task-modal';\n  get(element).classList.toggle('hide');\n}; // ***** task_delete_operation\n\n/**\r\n * Deletes a task from storage and update task container\r\n * dom using available tasks in storage\r\n * @param {String} task_id\r\n */\n\n\nvar task_delete_operation = function task_delete_operation(task_id) {\n  var task_to_delete = retrieve_task(task_id)[1];\n  STORAGE = delete_task_item(STORAGE, task_to_delete, \"tasks\");\n  update_task_dom(STORAGE);\n}; // ***** pwo_handler\n\n/**\r\n * processes event type when `YES` button is clicked on proceed\r\n * with operation modal (PWO modal). \r\n * \r\n * Based on the event type, the right event handler is called.\r\n * \r\n *  EVENT TYPES               CALLED HANDLER\r\n *  \r\n *  -- delete-task            task_delete_operation\r\n *  -- complete-task\r\n */\n\n\nvar yes_proceed_handler_processer = function yes_proceed_handler_processer() {\n  var pwo_yes_btn = get(\"#pwo-yes_btn\");\n  var operation_type = pwo_yes_btn.dataset.operation_type;\n  var task_id = pwo_yes_btn.dataset.task_id;\n\n  if (operation_type === \"delete-task\") {\n    task_delete_operation(task_id);\n    toggle_modal_visibility(\"#proceed-with-operation\");\n  }\n}; // **** pwo_event_listeners\n\n\nget(\"#pwo-yes_btn\").addEventListener('click', yes_proceed_handler_processer);\nget('#pwo-no_btn').addEventListener('click', function () {\n  delete get(\"#pwo-yes_btn\").dataset.task_id;\n  delete get(\"#pwo-yes_btn\").dataset.operation_type;\n  toggle_modal_visibility(\"#proceed-with-operation\");\n}); // ***** listener_4_task_edit\n\n/**\r\n * sets update event listener on all task instances present \r\n * on the DOM through iteration.\r\n */\n\nvar set_task_update_event = function set_task_update_event() {\n  var edit_task_btn = document.querySelectorAll(\".edit-task-btn\");\n  edit_task_btn.forEach(function (edit_btn) {\n    edit_btn.addEventListener('click', function (e) {\n      e.preventDefault();\n      get(\"#add_to_list_btn\").value = \"Save changes\";\n      var query_response = retrieve_task(edit_btn.dataset.task);\n\n      if (query_response[0] === true) {\n        toggle_modal_visibility();\n        populate_task_form(query_response[1]);\n      }\n    });\n  });\n}; // ***** listener_4_task_delete\n\n/***\r\n * sets delete listener on all available task delete button on the DOM,\r\n * open up P.W.O modal and set values ( operation-type and task_id ) to\r\n * proceed with operation yes button\r\n */\n\n\nvar set_task_delete_event = function set_task_delete_event() {\n  var task_delete_btn = get(\".card-btn__delete\");\n  task_delete_btn.forEach(function (delete_btn) {\n    delete_btn.addEventListener('click', function (e) {\n      e.preventDefault();\n      toggle_modal_visibility('#proceed-with-operation');\n      var pwo_yes_btn = get(\"#pwo-yes_btn\");\n      pwo_yes_btn.dataset.task_id = delete_btn.dataset.task;\n      pwo_yes_btn.dataset.operation_type = \"delete-task\";\n    });\n  });\n}; // ***** task_form_button_listener\n\n\nvar task_add_btn = get('#task-add-btn');\nvar close_task_modal = get(\"#close-task-modal\");\ntask_add_btn.addEventListener('click', function (e) {\n  e.preventDefault();\n  toggle_modal_visibility(\"#\".concat(task_add_btn.dataset['target']));\n  get(\"#add_to_list_btn\").value = \"Add to list\";\n});\nclose_task_modal.addEventListener('click', function (e) {\n  e.preventDefault();\n  toggle_modal_visibility();\n}); // ***** task_form_reset\n\n/**\r\n * Resets the value of form \r\n * @param {String} form_id \r\n *      unique identifier of the form to be reset\r\n */\n\nvar reset_form = function reset_form(form_id) {\n  get(\"#\".concat(form_id)).reset();\n}; // ***** form_validator\n\n/**\r\n * Validates submitted form values. This raises an exception if \r\n * form values doesn't pass validation process. \r\n * \r\n * @param {String} title \r\n *     required form value. If empty an exception is raised\r\n * @param {Date} date\r\n *     required form value. If empty an exception is raised.\r\n *     If value of this form field is having a previous date\r\n *     an exception is also raised.\r\n * @param {String} priority\r\n *     required form value. If empty an exception is raised.\r\n *     value of this field can either be \r\n * \r\n *        -- red\r\n * \r\n *        -- green\r\n * \r\n *        -- purple\r\n * \r\n *     anything aside this will make an exception to be raised.\r\n * @returns {Array} --> [ Boolean, Array ]\r\n *     returns true and a success message if validation is\r\n *     successful, otherwise, returns false and a list of error\r\n *     messages that made validation not to be succesful.\r\n */\n\n\nvar validate_form_values = function validate_form_values(title, date, priority) {\n  var message_list = [];\n\n  if (!title) {\n    message_list.push(\"title has no value\");\n  }\n\n  if (!date) {\n    message_list.push(\"kindly choose a Due date\");\n  } else {\n    /*\r\n     *  If date is not filled, validate the date to \r\n     *  make sure it's not a prior date.\r\n     */\n    var date_obj = new Date(date);\n    var present_date = new Date();\n\n    if (date_obj < present_date) {\n      message_list.push(\"Invalid Due Date -- Due Date cannot be a previous date\");\n    }\n  }\n\n  if (!priority) {\n    message_list.push(\"no priority choosen, kindly choose a priority\");\n  } else {\n    if (priority !== \"red\" && priority !== \"purple\" && priority !== \"green\") {\n      message_list.push(\"priority not known, invalid priority\");\n    }\n  }\n\n  if (message_list.length > 0) {\n    return [false, message_list];\n  }\n\n  return [true, [\"success\"]];\n}; // ***** create_task\n\n/**\r\n * Creates a task and returns it -- serving as task creation handler.\r\n * @param {String} tags \r\n * @param {String} due_date should hold a valid date format\r\n * @param {String} task_title \r\n * @param {Boolean} reminder \r\n * @param {String} priority \r\n * @param {String} target_time\r\n */\n\n\nvar create_new_task = function create_new_task(tags, due_date, task_title, reminder, priority, target_time) {\n  if (!tags) {\n    tags = ['untagged']; // assign a defualt tag if non is passed\n  } else {\n    tags = tags.split(','); // convert string with (,) dilimeter to array\n  }\n\n  var targetDate = new Date(due_date); // converts date string to date obj\n\n  var creationDate = new Date();\n  var task = new _Task__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tags, task_title, priority, reminder, targetDate, creationDate, target_time);\n  return task;\n}; // ***** update_task\n\n/**\r\n * Updates an existing task object ( retrieved by the passed `task_id`) with\r\n * submitted form data.\r\n * @param {String} task_id representing a task unique identifier\r\n * @param {Object} form_data key & value pairs of form submitted data\r\n */\n\n\nvar update_task = function update_task(task_id, form_data) {\n  var task = retrieve_task(task_id); // update retrieved task\n\n  task.tags = form_data.form_tag;\n  task.title = form_data.form_title;\n  task.targetDate = form_data.form_data;\n  task.targetTime = form_data.form_title;\n  task.reminder = form_data.form_reminder;\n  task.priority = form_data.form_priority;\n  task.timeStamp = form_data.form_timestamp;\n  return task;\n}; // ***** process_task_form\n// ****** UTILIZER OF FORM VALUE VALIDATION & CREATION OF TASK ******\n\n/**\r\n * retrieves task creation form field values, call validation method\r\n * on the retrived values and if validation passes, calls task \r\n * creation handler, passing the values retrieved from form field.\r\n * \r\n * After all the process are completed successfully, this function\r\n * will return the created task\r\n */\n\n\nvar process_task_form = function process_task_form() {\n  var task_title = get('#id_task_title').value;\n  var target_time = get(\"#id_task_time\").value;\n  var date_val = get('#id_task_date').value;\n  var reminder = get('#id_reminder').checked;\n  var tags = get('#id_task_tags').value;\n  var selected_priority = dom_checked_priority_iterator().value;\n  var is_update;\n  var form_dataset_task_id = get(\"#id-task-creation-form\").dataset.task_id;\n  delete get(\"#id-task-creation-form\").dataset.task_id;\n\n  if (form_dataset_task_id) {\n    if (form_dataset_task_id != \"\" && form_dataset_task_id.length > 0) {\n      is_update = true;\n    }\n  }\n  /**\r\n   * retrieve validation results which is an array\r\n   * whose first element ( at index 0 ) is a boolean\r\n   * and the last element ( at index 1 ) is an array \r\n   */\n\n\n  var validation_results = validate_form_values(task_title, date_val, selected_priority);\n  var form_valid = validation_results[0];\n  var validation_messages = validation_results[1];\n  /**\r\n   * a new task will only be created if validation_response\r\n   * is true, otherwise, nothing is done.\r\n   */\n\n  if (form_valid === true) {\n    /**\r\n     * A task form can either be used for updating an existing task\r\n     * or creating a new task. \r\n     * \r\n     * There is need to check if the form submitted is either for \r\n     * task update or task creation.\r\n     */\n    unhide_message_board(\"success-message-board\");\n    reset_form(\"id-task-creation-form\");\n    var task = create_new_task(tags, date_val, task_title, reminder, selected_priority, target_time);\n\n    if (is_update) {\n      task.id = form_dataset_task_id;\n      display_message([\"successfully updated\"], \"success-msg-note\");\n    } else {\n      display_message(validation_messages, \"success-msg-note\");\n    }\n\n    return task;\n  } else {\n    // display erroneous validation messages\n    unhide_message_board(\"form-message-board\");\n    display_message(validation_messages, \"form-msg-note\");\n  }\n}; // ***** create_task_listener\n\n/*** TASK CREATION EVENT TRIGGERER  */\n\n\nvar createTaskBtn = get('#add_to_list_btn');\ncreateTaskBtn.addEventListener('click', function (e) {\n  e.preventDefault();\n  var task = process_task_form();\n  var storage;\n\n  if (task) {\n    // close task creation modal\n    toggle_modal_visibility();\n    storage = persist_data(STORAGE, task, \"tasks\");\n  } // adding task to DOM\n\n\n  update_task_dom(storage); // add updating handler\n\n  set_task_update_event(); // add deleting handler\n\n  set_task_delete_event();\n}); // one time call\n\nset_task_update_event();\nset_task_delete_event();\n/**\r\n * \r\n *                          SECTION 3\r\n * ================================================================\r\n * ================================================================\r\n *                       USER EXPERIENCE\r\n * \r\n *  This section contains code which create app interface experience\r\n *  with user interactions\r\n *  \r\n *        TOPIC                                         FILE SEARCH KEY\r\n * \r\n *  -- Change application color theme                   change_theme_color\r\n *  -- Change application theme icon                    change_theme_icon\r\n * ================================================================\r\n */\n// ***** change_theme_color\n// ***** CHANGE APPLICATION COLOR THEME ******\n\nvar themeButton = get('#theme-btn');\n/**\r\n * changes background color theme -- theme color can either \r\n * be black or white.\r\n */\n\nvar change_theme = function change_theme() {\n  dom_classlist_toggler('body', 'bg-black', 'bg-white');\n}; // ***** change_theme_icon\n// ***** CHANGE APPLICATION COLOR THEME ******\n\n/**\r\n * changes icon on the theme button -- icon can either be a \r\n * moon icon or a sun icon.\r\n */\n\n\nvar change_theme_icon = function change_theme_icon() {\n  dom_classlist_toggler('theme-icon', 'fa-sun', 'fa-moon');\n};\n\nthemeButton.addEventListener('click', function (e) {\n  e.preventDefault();\n  change_theme();\n  change_theme_icon();\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });